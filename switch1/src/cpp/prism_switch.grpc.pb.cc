// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: prism_switch.proto

#include "prism_switch.pb.h"
#include "prism_switch.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace prism {

static const char *PrismSwitch_method_names[] = {
    "/prism.PrismSwitch/Add",    "/prism.PrismSwitch/ChangeOwner",
    "/prism.PrismSwitch/Delete", "/prism.PrismSwitch/Lock",
    "/prism.PrismSwitch/Unlock",
};

std::unique_ptr<PrismSwitch::Stub>
PrismSwitch::NewStub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
                     const ::grpc::StubOptions &options)
{
  (void)options;
  std::unique_ptr<PrismSwitch::Stub> stub(new PrismSwitch::Stub(channel));
  return stub;
}

PrismSwitch::Stub::Stub(
    const std::shared_ptr<::grpc::ChannelInterface> &channel)
    : channel_(channel),
      rpcmethod_Add_(PrismSwitch_method_names[0],
                     ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_ChangeOwner_(PrismSwitch_method_names[1],
                             ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_Delete_(PrismSwitch_method_names[2],
                        ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_Lock_(PrismSwitch_method_names[3],
                      ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_Unlock_(PrismSwitch_method_names[4],
                        ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
{
}

::grpc::Status
PrismSwitch::Stub::Add(::grpc::ClientContext *context,
                       const ::prism::PrismSwitchAddReq &request,
                       ::prism::PrismSwitchReply *response)
{
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Add_,
                                             context, request, response);
}

void
PrismSwitch::Stub::experimental_async::Add(
    ::grpc::ClientContext *context, const ::prism::PrismSwitchAddReq *request,
    ::prism::PrismSwitchReply *response, std::function<void(::grpc::Status)> f)
{
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(),
                                             stub_->rpcmethod_Add_, context,
                                             request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::AsyncAddRaw(::grpc::ClientContext *context,
                               const ::prism::PrismSwitchAddReq &request,
                               ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq, rpcmethod_Add_,
                                         context, request, true);
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::PrepareAsyncAddRaw(::grpc::ClientContext *context,
                                      const ::prism::PrismSwitchAddReq &request,
                                      ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq, rpcmethod_Add_,
                                         context, request, false);
}

::grpc::Status
PrismSwitch::Stub::ChangeOwner(
    ::grpc::ClientContext *context,
    const ::prism::PrismSwitchChangeOwnerReq &request,
    ::prism::PrismSwitchReply *response)
{
  return ::grpc::internal::BlockingUnaryCall(
      channel_.get(), rpcmethod_ChangeOwner_, context, request, response);
}

void
PrismSwitch::Stub::experimental_async::ChangeOwner(
    ::grpc::ClientContext *context,
    const ::prism::PrismSwitchChangeOwnerReq *request,
    ::prism::PrismSwitchReply *response, std::function<void(::grpc::Status)> f)
{
  return ::grpc::internal::CallbackUnaryCall(
      stub_->channel_.get(), stub_->rpcmethod_ChangeOwner_, context, request,
      response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::AsyncChangeOwnerRaw(
    ::grpc::ClientContext *context,
    const ::prism::PrismSwitchChangeOwnerReq &request,
    ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq,
                                         rpcmethod_ChangeOwner_, context,
                                         request, true);
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::PrepareAsyncChangeOwnerRaw(
    ::grpc::ClientContext *context,
    const ::prism::PrismSwitchChangeOwnerReq &request,
    ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq,
                                         rpcmethod_ChangeOwner_, context,
                                         request, false);
}

::grpc::Status
PrismSwitch::Stub::Delete(::grpc::ClientContext *context,
                          const ::prism::PrismSwitchDeleteReq &request,
                          ::prism::PrismSwitchReply *response)
{
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_,
                                             context, request, response);
}

void
PrismSwitch::Stub::experimental_async::Delete(
    ::grpc::ClientContext *context,
    const ::prism::PrismSwitchDeleteReq *request,
    ::prism::PrismSwitchReply *response, std::function<void(::grpc::Status)> f)
{
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(),
                                             stub_->rpcmethod_Delete_, context,
                                             request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::AsyncDeleteRaw(::grpc::ClientContext *context,
                                  const ::prism::PrismSwitchDeleteReq &request,
                                  ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq, rpcmethod_Delete_,
                                         context, request, true);
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::PrepareAsyncDeleteRaw(
    ::grpc::ClientContext *context,
    const ::prism::PrismSwitchDeleteReq &request, ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq, rpcmethod_Delete_,
                                         context, request, false);
}

::grpc::Status
PrismSwitch::Stub::Lock(::grpc::ClientContext *context,
                        const ::prism::PrismSwitchLockReq &request,
                        ::prism::PrismSwitchReply *response)
{
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Lock_,
                                             context, request, response);
}

void
PrismSwitch::Stub::experimental_async::Lock(
    ::grpc::ClientContext *context, const ::prism::PrismSwitchLockReq *request,
    ::prism::PrismSwitchReply *response, std::function<void(::grpc::Status)> f)
{
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(),
                                             stub_->rpcmethod_Lock_, context,
                                             request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::AsyncLockRaw(::grpc::ClientContext *context,
                                const ::prism::PrismSwitchLockReq &request,
                                ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq, rpcmethod_Lock_,
                                         context, request, true);
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::PrepareAsyncLockRaw(
    ::grpc::ClientContext *context, const ::prism::PrismSwitchLockReq &request,
    ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq, rpcmethod_Lock_,
                                         context, request, false);
}

::grpc::Status
PrismSwitch::Stub::Unlock(::grpc::ClientContext *context,
                          const ::prism::PrismSwitchLockReq &request,
                          ::prism::PrismSwitchReply *response)
{
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unlock_,
                                             context, request, response);
}

void
PrismSwitch::Stub::experimental_async::Unlock(
    ::grpc::ClientContext *context, const ::prism::PrismSwitchLockReq *request,
    ::prism::PrismSwitchReply *response, std::function<void(::grpc::Status)> f)
{
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(),
                                             stub_->rpcmethod_Unlock_, context,
                                             request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::AsyncUnlockRaw(::grpc::ClientContext *context,
                                  const ::prism::PrismSwitchLockReq &request,
                                  ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq, rpcmethod_Unlock_,
                                         context, request, true);
}

::grpc::ClientAsyncResponseReader<::prism::PrismSwitchReply> *
PrismSwitch::Stub::PrepareAsyncUnlockRaw(
    ::grpc::ClientContext *context, const ::prism::PrismSwitchLockReq &request,
    ::grpc::CompletionQueue *cq)
{
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::prism::PrismSwitchReply>::Create(channel_.get(), cq, rpcmethod_Unlock_,
                                         context, request, false);
}

PrismSwitch::Service::Service()
{
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrismSwitch_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<PrismSwitch::Service,
                                             ::prism::PrismSwitchAddReq,
                                             ::prism::PrismSwitchReply>(
          std::mem_fn(&PrismSwitch::Service::Add), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrismSwitch_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<PrismSwitch::Service,
                                             ::prism::PrismSwitchChangeOwnerReq,
                                             ::prism::PrismSwitchReply>(
          std::mem_fn(&PrismSwitch::Service::ChangeOwner), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrismSwitch_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<PrismSwitch::Service,
                                             ::prism::PrismSwitchDeleteReq,
                                             ::prism::PrismSwitchReply>(
          std::mem_fn(&PrismSwitch::Service::Delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrismSwitch_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<PrismSwitch::Service,
                                             ::prism::PrismSwitchLockReq,
                                             ::prism::PrismSwitchReply>(
          std::mem_fn(&PrismSwitch::Service::Lock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrismSwitch_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<PrismSwitch::Service,
                                             ::prism::PrismSwitchLockReq,
                                             ::prism::PrismSwitchReply>(
          std::mem_fn(&PrismSwitch::Service::Unlock), this)));
}

PrismSwitch::Service::~Service() {}

::grpc::Status
PrismSwitch::Service::Add(::grpc::ServerContext *context,
                          const ::prism::PrismSwitchAddReq *request,
                          ::prism::PrismSwitchReply *response)
{
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status
PrismSwitch::Service::ChangeOwner(
    ::grpc::ServerContext *context,
    const ::prism::PrismSwitchChangeOwnerReq *request,
    ::prism::PrismSwitchReply *response)
{
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status
PrismSwitch::Service::Delete(::grpc::ServerContext *context,
                             const ::prism::PrismSwitchDeleteReq *request,
                             ::prism::PrismSwitchReply *response)
{
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status
PrismSwitch::Service::Lock(::grpc::ServerContext *context,
                           const ::prism::PrismSwitchLockReq *request,
                           ::prism::PrismSwitchReply *response)
{
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status
PrismSwitch::Service::Unlock(::grpc::ServerContext *context,
                             const ::prism::PrismSwitchLockReq *request,
                             ::prism::PrismSwitchReply *response)
{
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

} // namespace prism
